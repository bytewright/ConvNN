import configargparse
import os
import logging
import subprocess


def get_best_caffemodel(snapshot_path):
    best_file = 1
    best_file_name = ''
    for f in os.listdir(snapshot_path):
        if f.endswith(".caffemodel"):
            iter_num = int(f.replace('_iter_', '').replace('.caffemodel', ''))
            if iter_num > best_file:
                best_file = iter_num
                best_file_name = f
    path_to_file = os.path.join(snapshot_path, best_file_name)
    if os.path.isfile(path_to_file):
        return path_to_file
    return None


def get_test_log(path):
    for f in os.listdir(path):
        if f.endswith(".test"):
            return os.path.join(path, f)
    return ''


def get_test_log2(path):
    for f in os.listdir(path):
        if f.endswith(".csv"):
            return os.path.join(path, f)
    return ''


def get_caffe_log(path):
    for f in os.listdir(path):
        if 'caffe_training.log' in f:
            return os.path.join(path, f)
    return ''


def get_network_path(path):
    for f in os.listdir(path):
        if f.endswith(".prototxt"):
            return os.path.join(path, f)
    return ''


def get_weight_path(path):
    return get_best_caffemodel(path)


if __name__ == "__main__":
    parser_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'log_parser',
                                    'my_log_parser2.py')
    plotter_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'auto_trainer', 'my_tools',
                                  'progress_plot2.py')
    extractor_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'auto_trainer', 'my_tools',
                                    'filter_extractor.py')
    #parser = configargparse.ArgParser()
    #parser.add_argument('--job_dir', help='path to reference test data, generated by caffe parse_log.py')
    # parser.set_defaults(DEBUG=True)
    #args = parser.parse_args()
    path_list = ['/home/ellerch/caffeProject/auto_trainer_output/2016-11-02_20h-00m-54s_experiment/*']

    run_parser = True
    run_plotter = True
    run_extractor = False
    curr_index = 0
    #for path in path_list:
    while True:
        if curr_index is path_list.__len__():
            break
        if path_list[curr_index].endswith('*'):
            print 'expanding: ' + path_list[curr_index]
            expandable_path = path_list[curr_index][0:-1]
            path_list.remove(path_list[curr_index])
            path_list = path_list + [os.path.join(expandable_path, x) for x in os.listdir(expandable_path) if os.path.isdir(os.path.join(expandable_path,x))]
            print path_list
            continue
        else:
            path = path_list[curr_index]
            curr_index += 1
        print path
        #print get_test_log(path)
        #print get_network_path(path)
        #print get_weight_path(path)
        if run_parser:
            #plotter
            print 'plotting learning curve as png'
            #plot_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'progress_plot.py')
            process = subprocess.Popen(['python',
                                        parser_script,
                                        '--log_file',
                                        get_caffe_log(path),
                                        '--output_file',
                                        os.path.join(os.path.dirname(path),
                                        'caffe_log_test.csv')],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT)
            #os.path.join(os.path.dirname(path), 'caffe_log_test{}.csv'.format(os.path.basename(path)[-5]))],
            output = process.communicate()[0]
            print output
        if run_plotter:
            #plotter
            print 'plotting learning curve as png'
            #plot_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'progress_plot.py')
            process = subprocess.Popen(['python',
                                        plotter_script,
                                        '--plot_data',
                                        get_test_log2(path),
                                        '--output_png_path',
                                        os.path.join(path, 'plotter_plot.png')],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT)
            output = process.communicate()[0]
            print output
        if run_extractor:
            #extractor
            print 'extracting filters'
            #filter_extract_script = os.path.join(os.path.dirname(os.path.realpath(__file__)),
            #                                     'filter_extractor.py')
            process = subprocess.Popen(['python', extractor_script,
                                        get_network_path(path), get_weight_path(path),
                                        path],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT)
            output = process.communicate()[0]
            #print output
    print 'all done'
