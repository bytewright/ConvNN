import configargparse
import os
import logging
import subprocess


def get_best_caffemodel(snapshot_path):
    best_file = 1
    best_file_name = ''
    for f in os.listdir(snapshot_path):
        if f.endswith(".caffemodel"):
            iter_num = int(f.replace('_iter_', '').replace('.caffemodel', ''))
            if iter_num > best_file:
                best_file = iter_num
                best_file_name = f
    path_to_file = os.path.join(snapshot_path, best_file_name)
    if os.path.isfile(path_to_file):
        return path_to_file
    return None


def get_test_log(path):
    for f in os.listdir(path):
        if f.endswith(".test"):
            return os.path.join(path, f)
    return ''


def get_network_path(path):
    for f in os.listdir(path):
        if f.endswith(".prototxt"):
            return os.path.join(path, f)
    return ''


def get_weight_path(path):
    return get_best_caffemodel(path)


if __name__ == "__main__":
    #parser = configargparse.ArgParser()
    #parser.add_argument('--job_dir', help='path to reference test data, generated by caffe parse_log.py')
    # parser.set_defaults(DEBUG=True)
    #args = parser.parse_args()
    path_list = ['/home/ellerch/caffeProject/auto_trainer_output/2016-10-25_14h-57m-43s_experiment/job_xx_alexnet_vanilla',
                 '/home/ellerch/caffeProject/auto_trainer_output/_gute_runs/my_conv_1ab',
                 '/home/ellerch/caffeProject/auto_trainer_output/_gute_runs/vgg 16k']

    run_plotter = True
    run_extractor = True

    for path in path_list:
        print path
        print get_test_log(path)
        print get_network_path(path)
        print get_weight_path(path)
        if run_plotter:
            #plotter
            print 'plotting learning curve as png'
            plot_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'progress_plot.py')
            process = subprocess.Popen(['python',
                                        plot_script,
                                        '--plot_data',
                                        get_test_log(path),
                                        '--output_png_path',
                                        os.path.join(path, 'plotter_plot.png')],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT)
            output = process.communicate()[0]
            print output
        if run_extractor:
            #extractor
            print 'extracting filters'
            filter_extract_script = os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                                 'filter_extractor.py')
            process = subprocess.Popen(['python', filter_extract_script,
                                        get_network_path(path), get_weight_path(path),
                                        path],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT)
            output = process.communicate()[0]
            #print output
    print 'all done'
