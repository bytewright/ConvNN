import configargparse
import os
import logging
import json
import subprocess


def get_best_caffemodel(snapshot_path):
    best_file = 1
    best_file_name = ''
    for f in os.listdir(snapshot_path):
        if f.endswith(".caffemodel"):
            iter_num = int(f.replace('_iter_', '').replace('.caffemodel', ''))
            if iter_num > best_file:
                best_file = iter_num
                best_file_name = f
    path_to_file = os.path.join(snapshot_path, best_file_name)
    if os.path.isfile(path_to_file):
        return path_to_file
    return None


def get_test_log(path):
    for f in os.listdir(path):
        if f.endswith(".test"):
            return os.path.join(path, f)
    return ''


def get_test_log2(path):
    for f in os.listdir(path):
        if f.endswith(".csv"):
            return os.path.join(path, f)
    return ''


def get_caffe_log(path):
    for f in os.listdir(path):
        if 'caffe_training.log' in f:
            return os.path.join(path, f)
    return ''


def get_network_path(path):
    for f in os.listdir(path):
        if f.endswith(".prototxt"):
            return os.path.join(path, f)
    return ''


def get_weight_path(path):
    return get_best_caffemodel(path)


def load_data(data_file):
    csv_delimiter = ';'
    test_data = []
    with open(data_file, 'r') as f:
        for line in f.readlines():
            #print line
            line = line.rstrip()
            if line.split(csv_delimiter).__len__() < 3:
                print('incomplete line found')
            else:
                test_data.append([data for data in line.split(csv_delimiter) if data is not ''])

    return test_data[1:]


def get_max_accs(data):
    acc1 = [float(x[1]) for x in data]
    acc5 = [float(x[2]) for x in data]
    return '{:.4}'.format((max(acc1))*100), '{:.4}'.format((max(acc5))*100)


def get_avg_acc_1(data, num_items):
    acc1 = [x[1] for x in data]
    sum = 0.0
    items = 0.0
    for acc in acc1[-num_items:]:
        sum += float(acc)
        items += 1.0
    return '{:.4}'.format((sum/items)*100)


def get_avg_acc_5(data, num_items):
    acc5 = [x[2] for x in data]
    sum = 0.0
    items = 0.0
    for acc in acc5[-num_items:]:
        sum += float(acc)
        items += 1.0
    return '{:.4}'.format((sum/items)*100)


def get_avg_loss(data, num_items):
    loss = [x[3] for x in data]
    sum = 0.0
    items = 0.0
    for acc in loss[-num_items:]:
        sum += float(acc)
        items += 1.0
    return sum / items


def make_latex_table(path, ref_path):
    for f in os.listdir(path):
        if f.endswith(".json"):
            json_file = os.path.join(path, f)
        if f.endswith(".csv"):
            csv_file = os.path.join(path, f)
    for f in os.listdir(ref_path):
        if f.endswith(".json"):
            ref_file = os.path.join(ref_path, f)
        if f.endswith(".csv"):
            csv_ref_file = os.path.join(ref_path, f)

    csv_data = load_data(csv_file)
    csv_ref = load_data(csv_ref_file)
    stats_dict = json.load(open(json_file, 'r'))
    ref_dict = json.load(open(ref_file, 'r'))
    max1, max5 = get_max_accs(csv_data)
    ref1, ref5 = get_max_accs(csv_ref)
    latex = '''
\\begin{{table}}[!htbp]
    \\centering
    \\begin{{tabularx}}{{\\textwidth}}{{|X|p{{4cm}}|p{{4cm}}|}}
    \\hline Name & Wert & Referenzwert \\\\
    \\hline test loss & {:.5} & {:.5} \\\\
    \\hline duration & {} & {} \\\\
    \\hline Top-1/5 $\\diameter$ & {}\% / {}\% & {}\% / {}\% \\\\
    \\hline Top-1/5 $max$ & {}\% / {}\% & {}\% / {}\% \\\\
    \\hline
    \\end{{tabularx}}
    \\caption{{Ergebnisse des Experiments}}
    \\label{{tab:exp__results}}
\\end{{table}}
'''.format(get_avg_loss(csv_data, 10), get_avg_loss(csv_ref, 10),
            stats_dict['duration'], ref_dict['duration'],
           get_avg_acc_1(csv_data, 10), get_avg_acc_5(csv_data, 10),
           get_avg_acc_1(csv_ref, 10), get_avg_acc_5(csv_ref, 10),
           max1, max5,
           ref1, ref5).replace('.',',')
    with open(os.path.join(path,'latex_table.txt'),'w') as f:
        f.write(latex)

if __name__ == "__main__":
    parser_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'log_parser',
                                    'my_log_parser2.py')
    plotter_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'auto_trainer', 'tools',
                                  'progress_plot2.py')
    extractor_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'auto_trainer', 'tools',
                                    'filter_extractor.py')
    #parser = configargparse.ArgParser()
    #parser.add_argument('--job_dir', help='path to reference test data, generated by caffe parse_log.py')
    # parser.set_defaults(DEBUG=True)
    #args = parser.parse_args()
    path_list = ['H:\\Thesis_data\\*']
    ref_path = 'H:\\Thesis_data\\00_vanilla\\'
    ref_data_path = 'H:\\00_vanilla\\thesis_exp0_vanilla_caffe_test_log.csv'
    run_parser = False
    run_plotter = True
    run_extractor = False
    run_latexer = True
    curr_index = 0
    #for path in path_list:
    while True:
        if curr_index is path_list.__len__():
            break
        if path_list[curr_index].endswith('*'):
            print 'expanding: ' + path_list[curr_index]
            expandable_path = path_list[curr_index][0:-1]
            path_list.remove(path_list[curr_index])
            path_list = path_list + [os.path.join(expandable_path, x) for x in os.listdir(expandable_path) if os.path.isdir(os.path.join(expandable_path,x))]
            print path_list
            continue
        else:
            path = path_list[curr_index]
            curr_index += 1
        print path
        #print get_test_log(path)
        #print get_network_path(path)
        #print get_weight_path(path)
        if run_parser:
            #plotter
            print 'plotting learning curve as png'
            #plot_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'progress_plot.py')
            process = subprocess.Popen(['python',
                                        parser_script,
                                        '--log_file',
                                        get_caffe_log(path),
                                        '--output_file',
                                        os.path.join(path,
                                        'caffe_log_test.csv'),
                                        '--reference_data',
                                        ref_data_path],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT)
            #os.path.join(os.path.dirname(path), 'caffe_log_test{}.csv'.format(os.path.basename(path)[-5]))],
            output = process.communicate()[0]
            print output
        if run_plotter:
            #plotter
            print 'plotting learning curve as png'
            #plot_script = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'progress_plot.py')
            process = subprocess.Popen(['python',
                                        plotter_script,
                                        '--plot_data',
                                        get_test_log2(path),
                                        '--output_png_path',
                                        os.path.join(path, 'progress_plot2_plot.png')],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT)
            output = process.communicate()[0]
            print output
        if run_extractor:
            #extractor
            print 'extracting filters'
            #filter_extract_script = os.path.join(os.path.dirname(os.path.realpath(__file__)),
            #                                     'filter_extractor.py')
            process = subprocess.Popen(['python', extractor_script,
                                        get_network_path(path), get_weight_path(path),
                                        path],
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.STDOUT)
            output = process.communicate()[0]
            #print output
        if run_latexer:
            make_latex_table(path, ref_path)
    print 'all done'
